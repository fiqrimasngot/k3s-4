---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: ghost-mysql
  namespace: media
spec:
  interval: 5m
  chart:
    spec:
      reconcileStrategy: Revision
      chart: mysql-innodbcluster
      version: "2.1.1"
      sourceRef:
        kind: HelmRepository
        name: mysql-charts
        namespace: flux-system

  install:
    remediation:
      retries: 4
  upgrade:
    remediation:
      retries: 3
      remediateLastFailure: true

  values:
    serverVersion: "8.1.0"
    serverInstances: 1
    routerInstances: 1
    tls:
      useSelfSigned: true
    datadirVolumeClaimTemplate:
      storageClassName: longhorn
      accessModes: ReadWriteOnce
      resources:
        requests:
          storage: 2Gi

    backupProfiles:
      - name: ghost-mysql-backup-pvc # Embedded backup profile
        dumpInstance: # MySQL Shell Dump
          # dumpOptions:
          #   excludeTables: "[world.country]" # Example to exclude one table
          storage:
            persistentVolumeClaim:
              claimName: ghost-db-backup
    backupSchedules:
      - name: mygreatschedule
        schedule: "0 0 * * *" # Daily, at midnight
        backupProfileName: ghost-mysql-backup-pvc # reference the desired backupProfiles's name
        enabled: true # backup schedules can be temporarily disabled

    router:
      resources:
        requests:
          cpu: 48m
          memory: 64M

    podSpec:
      resources:
        requests:
          cpu: 50m
          memory: 1200M
        limits:
          cpu: 300m
          memory: 2250M
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 95
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app.kubernetes.io/name
                      operator: In
                      values:
                        - mysql-innodbcluster-mysql-server
                topologyKey: kubernetes.io/hostname
  valuesFrom:
    - targetPath: credentials.root.user
      kind: Secret
      name: ghost-secrets
      valuesKey: rootUser
    - targetPath: credentials.root.password
      kind: Secret
      name: ghost-secrets
      valuesKey: rootPassword
---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: &app ghost
  namespace: media
spec:
  interval: 5m
  chart:
    spec:
      chart: ghost
      version: 2.1.2
      sourceRef:
        kind: HelmRepository
        name: k8s-at-home-charts
        namespace: flux-system
      interval: 5m

  dependsOn:
    - name: ghost-mysql
      namespace: media

  install:
    remediation:
      retries: 4
  upgrade:
    remediation:
      remediateLastFailure: true

  valuesFrom:
    - targetPath: env.database__connection__password
      kind: Secret
      name: ghost-secrets
      valuesKey: rootPassword
    - targetPath: env.database__connection__user
      kind: Secret
      name: ghost-secrets
      valuesKey: rootUser

  values:
    global:
      nameOverride: *app
    image:
      reposistory: ghost
      # renovate: datasource=docker depName=ghost
      tag: "5.70.2"
    env:
      TZ: "${TIMEZONE}"
      url: "https://journal.${SECRET_DOMAIN}"
      admin__url: "https://tyg3r.${SECRET_DOMAIN}"
      database__client: mysql
      database__connection__host: ghost-mysql
      database__connection__database: ghost
      mail__transport: SMTP
      mail__from: ${MAIILGUN_FROM_EMAIL}
      mail__options__service: Mailgun
      mail__options__host: smtp.mailgun.org
      mail__options__port: 465
      mail__options__secure: true
      mail__options__auth__user: postmaster@mail.${SECRET_DOMAIN}
      mail__options__auth__pass: ${MAILGUN_SMTP_PASSWORD}
      # mail__api_key: ${MAILGUN_API_KEY}
    ingress:
      main:
        enabled: true
        ingressClassName: external
        annotations:
          external-dns.alpha.kubernetes.io/target: "external.${SECRET_DOMAIN}"
          hajimari.io/enable: "true"
          hajimari.io/icon: "ghost"
          # cert-manager.io/cluster-issuer: "letsencrypt-production"
          # cert-manager.io/uri-sans: &host3 www.${SECRET_DOMAIN}
          # traefik.ingress.kubernetes.io/router.priority: "99"
          # traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
          # traefik.ingress.kubernetes.io/router.middlewares: "networking-chain-no-auth-tgr@kubernetescrd"
        hosts:
          - host: &host2 journal.${SECRET_DOMAIN}
            paths:
              - path: /
                pathType: Prefix
          - host: &host3 tyg3r.${SECRET_DOMAIN}
            paths:
              - path: /
                pathType: Prefix
        tls:
          - hosts:
              - *host2
              - *host3
            # secretName: tls.tyg3r-tgr
      # admin:
      #   enabled: true
      #   ingressClassName: traefik
      #   annotations:
      #     hajimari.io/enable: "true"
      #     hajimari.io/icon: "ghost"
      #     cert-manager.io/cluster-issuer: "letsencrypt-production"
      #     traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
      #     # Once authentik gets itself together this can go back to networking-bloopnet-xyz-auth@kubernetescrd
      #     traefik.ingress.kubernetes.io/router.middlewares: networking-ghost-admin-add-prefix@kubernetescrd
      #   hosts:
      #     - host: &host tyg3r.${SECRET_DOMAIN}
      #       paths:
      #         - path: /
      #           pathType: Exact
      #   tls:
      #     - hosts:
      #         - *host
      #       secretName: tls.tyg3r-xyz
    persistence:
      content:
        enabled: true
        existingClaim: ghost-config-v1
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ghost-config-v1
  namespace: media
spec:
  accessModes:
    # - ReadWriteOnce
    - ReadWriteMany
  resources:
    requests:
      storage: 2Gi
  storageClassName: longhorn
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ghost-db-backup
  namespace: media
spec:
  storageClassName: longhorn
  accessModes:
    # - ReadWriteOnce
    - ReadWriteMany
  resources:
    requests:
      storage: 2Gi
