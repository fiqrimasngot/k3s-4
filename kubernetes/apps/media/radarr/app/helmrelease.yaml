---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: radarr
  namespace: media
spec:
  interval: 5m
  chart:
    spec:
      # renovate: registryUrl=https://k8s-at-home.com/charts/
      chart: radarr
      version: 16.3.2
      sourceRef:
        kind: HelmRepository
        name: k8s-at-home-charts
        namespace: flux-system
      interval: 5m
  install:
    timeout: 10m
    remediation:
      retries: 3
  upgrade:
    timeout: 10m
    remediation:
      retries: 3
      remediateLastFailure: true
    cleanupOnFail: true
  rollback:
    timeout: 10m
    recreate: true
    cleanupOnFail: true
  values:
    image:
      repository: ghcr.io/k8s-at-home/radarr
      tag: v4.2.4.6635
    updateStrategy: Recreate
    env:
      TZ: "${TIMEZONE}"
    ingress:
      main:
        enabled: true
        ingressClassName: "internal"
        annotations:
          # external-dns.alpha.kubernetes.io/target: "ipv4.${SECRET_DOMAIN}"
          # external-dns/is-public: "false"
          # hajimari.io/enable: "true"
          # hajimari.io/icon: "filmstrip"
          # #traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
          # #traefik.ingress.kubernetes.io/router.middlewares: "networking-basic-auth@kubernetescrd"
          # nginx.ingress.kubernetes.io/configuration-snippet: |
          #   proxy_set_header Accept-Encoding "";
          #   sub_filter '</head>' '<link rel="stylesheet" type="text/css" href="https://theme-park.dev/css/base/radarr/nord.css"></head>';
          #   sub_filter_once on;
          # nginx.ingress.kubernetes.io/auth-url: "http://authelia.security.svc.cluster.local/api/verify"
          # nginx.ingress.kubernetes.io/auth-signin: "https://login.${SECRET_DOMAIN}"
        hosts:
          - host: &host "radarr.${SECRET_DOMAIN}"
            paths:
              - path: /
                pathType: Prefix
        tls:
          - secretName: "${SECRET_DOMAIN//./-}-tls"
            hosts:
              - *host
      api:
        enabled: true
        ingressClassName: "internal"
        annotations:
          #traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
        hosts:
          - host: &hostapi "radarr.${SECRET_DOMAIN}"
            paths:
              - path: /api
                pathType: Prefix
        tls:
          - secretName: "${SECRET_DOMAIN//./-}-tls"
            hosts:
              - *hostapi
    podSecurityContext:
      supplementalGroups:
        - 100
    metrics:
      enabled: true
      serviceMonitor:
        interval: 3m
        scrapeTimeout: 1m
      prometheusRule:
        enabled: true
      exporter:
        image:
          repository: ghcr.io/onedr0p/exportarr
          tag: v1.1.0
        env:
          port: 9794
          additionalMetrics: true
          unknownQueueItems: false
    persistence:
      config:
        enabled: true
        existingClaim: radarr-config-v1
      media:
        enabled: true
        type: custom
        volumeSpec:
          nfs:
            server: "10.32.1.5"
            path: /mnt/lab-pool/k3s-nfs/Media
        mountPath: /media
    nodeSelector: 
      worker: yes
    resources:
      requests:
        memory: 250Mi
        cpu: 500m
      limits:
        memory: 1500Mi
    additionalContainers:
      fsfreeze:
        name: fsfreeze
        image: ubuntu:focal-20210827
        imagePullPolicy: IfNotPresent
        command:
          - "/bin/bash"
          - "-c"
          - "sleep infinity"
        volumeMounts:
          - name: config
            mountPath: /config
        securityContext:
          privileged: true
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: radarr-config-v1
  namespace: media
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
  storageClassName: longhorn          